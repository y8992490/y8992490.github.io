<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="posts/5.html"/>
      <url>posts/5.html</url>
      
        <content type="html"><![CDATA[<h1 id="前端学习路线"><a href="#前端学习路线" class="headerlink" title="前端学习路线"></a>前端学习路线</h1><p><strong>大佬视频分享</strong></p><ol><li><a href="https://www.bilibili.com/video/BV1Kf4y1X7kx?t=356">【收藏+执行】按这个学，入职没问题！前端开发详细学习路线视频教程，串起前端编程开发几乎所有主流技术_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1yZ4y1c7VB">2021前端自学路径 自学程序你只缺张路径图_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/BV1ZZ4y1H7rU?from=search&amp;seid=6934986813087885964">【干货】前端学习路线分享！写了个网站帮助你学习前端！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ol><p>以下自己做的路线图都是用三位UP主的路线自己拼凑的，准备开始学习。</p><h2 id="第一阶段（入门级）"><a href="#第一阶段（入门级）" class="headerlink" title="第一阶段（入门级）"></a>第一阶段（入门级）</h2><p>能够根据需求设计出简单网页</p><h3 id="通用基础"><a href="#通用基础" class="headerlink" title="通用基础"></a>通用基础</h3><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><h5 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h5><h5 id="工厂"><a href="#工厂" class="headerlink" title="工厂"></a>工厂</h5><h5 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h5><h5 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h5><h5 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h5><h5 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h5><h5 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h5><h5 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h5><h5 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h5><h4 id="算法数据结构"><a href="#算法数据结构" class="headerlink" title="算法数据结构"></a>算法数据结构</h4><h5 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h5><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><h6 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h6><h6 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h6><h6 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h6><h6 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h6><h6 id="树"><a href="#树" class="headerlink" title="树"></a>树</h6><h6 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h6><h6 id="图"><a href="#图" class="headerlink" title="图"></a>图</h6><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><h6 id="基本算法"><a href="#基本算法" class="headerlink" title="基本算法"></a>基本算法</h6><p>#######查找</p><p>#######排序</p><h6 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h6><p>#######枚举</p><p>#######递归</p><p>#######贪心</p><p>#######分治</p><p>#######动态规则</p><p>#######回溯</p><h5 id="互联网如何运作"><a href="#互联网如何运作" class="headerlink" title="互联网如何运作"></a>互联网如何运作</h5><p>####在互联网（网络协议、浏览器）</p><h5 id="什么是HTTP-HTTPS（网络协议）"><a href="#什么是HTTP-HTTPS（网络协议）" class="headerlink" title="什么是HTTP/HTTPS（网络协议）"></a>什么是HTTP/HTTPS（网络协议）</h5><h6 id="网络分层和TCP-IP协议栈"><a href="#网络分层和TCP-IP协议栈" class="headerlink" title="网络分层和TCP/IP协议栈"></a>网络分层和TCP/IP协议栈</h6><h6 id="DNS原理"><a href="#DNS原理" class="headerlink" title="DNS原理"></a>DNS原理</h6><h6 id="CDN原理-HTTP-HTTPS协议"><a href="#CDN原理-HTTP-HTTPS协议" class="headerlink" title="CDN原理/HTTP/HTTPS协议"></a>CDN原理/HTTP/HTTPS协议</h6><h6 id="ARP-RARP协议"><a href="#ARP-RARP协议" class="headerlink" title="ARP/RARP协议"></a>ARP/RARP协议</h6><h6 id="TCP-UDP协议"><a href="#TCP-UDP协议" class="headerlink" title="TCP/UDP协议"></a>TCP/UDP协议</h6><h5 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h5><h6 id="VSCode的使用"><a href="#VSCode的使用" class="headerlink" title="VSCode的使用"></a>VSCode的使用</h6><h5 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h5><h6 id="各种浏览器的区别"><a href="#各种浏览器的区别" class="headerlink" title="各种浏览器的区别"></a>各种浏览器的区别</h6><h6 id="浏览器如何运行？"><a href="#浏览器如何运行？" class="headerlink" title="浏览器如何运行？"></a>浏览器如何运行？</h6><h6 id="浏览器差异兼容性"><a href="#浏览器差异兼容性" class="headerlink" title="浏览器差异兼容性"></a>浏览器差异兼容性</h6><p>#######Chrome</p><h6 id="Firefox"><a href="#Firefox" class="headerlink" title="#Firefox"></a>#Firefox</h6><h6 id="Safarl"><a href="#Safarl" class="headerlink" title="#Safarl"></a>#Safarl</h6><h6 id="ndroid-Browser"><a href="#ndroid-Browser" class="headerlink" title="#ndroid Browser"></a>#ndroid Browser</h6><h6 id="IOS-Safan"><a href="#IOS-Safan" class="headerlink" title="#IOS Safan"></a>#IOS Safan</h6><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><h4 id="基本组成和语法规则"><a href="#基本组成和语法规则" class="headerlink" title="基本组成和语法规则"></a>基本组成和语法规则</h4><h4 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h4><h5 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h5><h5 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h5><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><h5 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h5><h5 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h5><h5 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h5><h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><h5 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h5><h5 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h5><h5 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h5><h4 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h4><h5 id="id"><a href="#id" class="headerlink" title="id"></a>id</h5><h5 id="class"><a href="#class" class="headerlink" title="class"></a>class</h5><h5 id="style"><a href="#style" class="headerlink" title="style"></a>style</h5><h5 id="title"><a href="#title" class="headerlink" title="title"></a>title</h5><h5 id="…"><a href="#…" class="headerlink" title="…."></a>….</h5><h4 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h4><h5 id="新绘画元素canvas"><a href="#新绘画元素canvas" class="headerlink" title="新绘画元素canvas"></a>新绘画元素canvas</h5><h5 id="新多媒体元素audio-video等等"><a href="#新多媒体元素audio-video等等" class="headerlink" title="新多媒体元素audio/video等等"></a>新多媒体元素audio/video等等</h5><h5 id="新表单元素和属datalist-keygen-output等等"><a href="#新表单元素和属datalist-keygen-output等等" class="headerlink" title="新表单元素和属datalist/keygen/output等等"></a>新表单元素和属datalist/keygen/output等等</h5><h5 id="内联SVG"><a href="#内联SVG" class="headerlink" title="内联SVG"></a>内联SVG</h5><h5 id="Web存储locaLStorage-sesslonStorage等"><a href="#Web存储locaLStorage-sesslonStorage等" class="headerlink" title="Web存储locaLStorage/sesslonStorage等"></a>Web存储locaLStorage/sesslonStorage等</h5><h5 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h5><h4 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h4><h4 id="SEO搜索优化"><a href="#SEO搜索优化" class="headerlink" title="SEO搜索优化"></a>SEO搜索优化</h4><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><h5 id="基本语法语法规则"><a href="#基本语法语法规则" class="headerlink" title="基本语法语法规则"></a>基本语法语法规则</h5><h6 id="常见属性和设置"><a href="#常见属性和设置" class="headerlink" title="常见属性和设置"></a>常见属性和设置</h6><h5 id="各种选择器"><a href="#各种选择器" class="headerlink" title="各种选择器"></a>各种选择器</h5><h6 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h6><h6 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h6><h6 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h6><h6 id="class选择"><a href="#class选择" class="headerlink" title="class选择"></a>class选择</h6><h6 id="组合-复合选择器"><a href="#组合-复合选择器" class="headerlink" title="组合/复合选择器"></a>组合/复合选择器</h6><h5 id="盒模型"><a href="#盒模型" class="headerlink" title="盒模型"></a>盒模型</h5><h6 id="content"><a href="#content" class="headerlink" title="content"></a>content</h6><h6 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h6><h6 id="border"><a href="#border" class="headerlink" title="border"></a>border</h6><h6 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h6><h5 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h5><h6 id="static"><a href="#static" class="headerlink" title="static"></a>static</h6><h6 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h6><h6 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h6><h6 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h6><h6 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h6><h5 id="布局-1"><a href="#布局-1" class="headerlink" title="布局"></a>布局</h5><h6 id="float"><a href="#float" class="headerlink" title="float"></a>float</h6><h6 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h6><h6 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h6><h6 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h6><h5 id="CSS3新特性"><a href="#CSS3新特性" class="headerlink" title="CSS3新特性"></a>CSS3新特性</h5><h6 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h6><h6 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h6><h6 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h6><h6 id="文本和字体"><a href="#文本和字体" class="headerlink" title="文本和字体"></a>文本和字体</h6><h6 id="2D-3D转换"><a href="#2D-3D转换" class="headerlink" title="2D/3D转换"></a>2D/3D转换</h6><h6 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h6><h6 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h6><h6 id="…-1"><a href="#…-1" class="headerlink" title="….."></a>…..</h6><h3 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><h5 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h5><h5 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h5><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><h5 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h5><h5 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h5><h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><h5 id="…-2"><a href="#…-2" class="headerlink" title="…."></a>….</h5><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h5><h5 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h5><h5 id="Functing-构造器"><a href="#Functing-构造器" class="headerlink" title="Functing()构造器"></a>Functing()构造器</h5><h5 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h5><h5 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h5><h5 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h5><h5 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h5><h5 id="call（）方法-apply（）方法"><a href="#call（）方法-apply（）方法" class="headerlink" title="call（）方法/apply（）方法"></a>call（）方法/apply（）方法</h5><h5 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h5><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><h5 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h5><h6 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h6><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><h5 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h5><h6 id="构造器模式"><a href="#构造器模式" class="headerlink" title="构造器模式"></a>构造器模式</h6><h6 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h6><h6 id="其他组合或演进模式"><a href="#其他组合或演进模式" class="headerlink" title="其他组合或演进模式"></a>其他组合或演进模式</h6><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><h6 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h6><h6 id="构造继承"><a href="#构造继承" class="headerlink" title="构造继承"></a>构造继承</h6><h6 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h6><h6 id="寄生继承"><a href="#寄生继承" class="headerlink" title="寄生继承"></a>寄生继承</h6><h6 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h6><h5 id="常用引用类型"><a href="#常用引用类型" class="headerlink" title="常用引用类型"></a>常用引用类型</h5><h6 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h6><h6 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h6><h6 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h6><h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><h6 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h6><h6 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h6><h6 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h6><h6 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h6><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><h5 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h5><h5 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h5><h5 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h5><h5 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h5><h5 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h5><h5 id="弹框"><a href="#弹框" class="headerlink" title="弹框"></a>弹框</h5><h5 id="计时"><a href="#计时" class="headerlink" title="计时"></a>计时</h5><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><h5 id="节点层次、类型、属性"><a href="#节点层次、类型、属性" class="headerlink" title="节点层次、类型、属性"></a>节点层次、类型、属性</h5><h5 id="DOM操作"><a href="#DOM操作" class="headerlink" title="DOM操作"></a>DOM操作</h5><h6 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h6><h6 id="动态脚本"><a href="#动态脚本" class="headerlink" title="动态脚本"></a>动态脚本</h6><h6 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h6><h6 id="……"><a href="#……" class="headerlink" title="……"></a>……</h6><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><h6 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h6><h6 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h6><h6 id="冒泡-捕获"><a href="#冒泡-捕获" class="headerlink" title="冒泡/捕获"></a>冒泡/捕获</h6><h6 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h6><h6 id="各种具体事件类型"><a href="#各种具体事件类型" class="headerlink" title="各种具体事件类型"></a>各种具体事件类型</h6><h6 id="UI"><a href="#UI" class="headerlink" title="#UI"></a>#UI</h6><h6 id="鼠标-滚轮"><a href="#鼠标-滚轮" class="headerlink" title="#鼠标/滚轮"></a>#鼠标/滚轮</h6><h6 id="焦点"><a href="#焦点" class="headerlink" title="#焦点"></a>#焦点</h6><h6 id="键盘-文本"><a href="#键盘-文本" class="headerlink" title="#键盘/文本"></a>#键盘/文本</h6><h6 id="………"><a href="#………" class="headerlink" title="#………"></a>#………</h6><h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><h6 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h6><h6 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h6><h5 id="ES6-7-8"><a href="#ES6-7-8" class="headerlink" title="ES6.7.8"></a>ES6.7.8</h5><h6 id="块级绑定"><a href="#块级绑定" class="headerlink" title="块级绑定"></a>块级绑定</h6><h6 id="各种扩展：字符串、数值、函数、数组、对象、正则…-等等"><a href="#各种扩展：字符串、数值、函数、数组、对象、正则…-等等" class="headerlink" title="各种扩展：字符串、数值、函数、数组、对象、正则…..等等"></a>各种扩展：字符串、数值、函数、数组、对象、正则…..等等</h6><h6 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h6><h6 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h6><h6 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h6><h6 id="Set-Map"><a href="#Set-Map" class="headerlink" title="Set/Map"></a>Set/Map</h6><h6 id="Promise-async-await等异步编程"><a href="#Promise-async-await等异步编程" class="headerlink" title="Promise/async/await等异步编程"></a>Promise/async/await等异步编程</h6><h6 id="lterator-Generator"><a href="#lterator-Generator" class="headerlink" title="lterator/Generator"></a>lterator/Generator</h6><h6 id="Proxy-Reflect"><a href="#Proxy-Reflect" class="headerlink" title="Proxy/Reflect"></a>Proxy/Reflect</h6><h6 id="Module-模块"><a href="#Module-模块" class="headerlink" title="Module/模块"></a>Module/模块</h6><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="第二阶段（进阶工程化）"><a href="#第二阶段（进阶工程化）" class="headerlink" title="第二阶段（进阶工程化）"></a>第二阶段（进阶工程化）</h2><p>能够熟练的按需求设计出各种风格的网站。</p><h3 id="版本管理工具Git和Github"><a href="#版本管理工具Git和Github" class="headerlink" title="版本管理工具Git和Github"></a>版本管理工具Git和Github</h3><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><h4 id="注册github并学会使用"><a href="#注册github并学会使用" class="headerlink" title="注册github并学会使用"></a>注册github并学会使用</h4><h4 id="搭建一个静态博客站点"><a href="#搭建一个静态博客站点" class="headerlink" title="搭建一个静态博客站点"></a>搭建一个静态博客站点</h4><h4 id="搭建并管理一个bolg"><a href="#搭建并管理一个bolg" class="headerlink" title="搭建并管理一个bolg"></a>搭建并管理一个bolg</h4><h3 id="Node-js基础（暂时不用太深入）"><a href="#Node-js基础（暂时不用太深入）" class="headerlink" title="Node.js基础（暂时不用太深入）"></a>Node.js基础（暂时不用太深入）</h3><h4 id="代码的组织-部署"><a href="#代码的组织-部署" class="headerlink" title="代码的组织/部署"></a>代码的组织/部署</h4><h5 id="模块module"><a href="#模块module" class="headerlink" title="模块module"></a>模块module</h5><h5 id="包package"><a href="#包package" class="headerlink" title="包package"></a>包package</h5><h5 id="包管理器npm"><a href="#包管理器npm" class="headerlink" title="包管理器npm"></a>包管理器npm</h5><h4 id="文件操作-如fs包"><a href="#文件操作-如fs包" class="headerlink" title="文件操作 如fs包"></a>文件操作 如fs包</h4><h4 id="网络操作如http包"><a href="#网络操作如http包" class="headerlink" title="网络操作如http包"></a>网络操作如http包</h4><h4 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h4><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><h3 id="组件化开发框架"><a href="#组件化开发框架" class="headerlink" title="组件化开发框架"></a>组件化开发框架</h3><h4 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h4><h5 id="VueX（推荐）"><a href="#VueX（推荐）" class="headerlink" title="VueX（推荐）"></a>VueX（推荐）</h5><h5 id="Vue-router（推荐）"><a href="#Vue-router（推荐）" class="headerlink" title="Vue-router（推荐）"></a>Vue-router（推荐）</h5><h5 id="最基础"><a href="#最基础" class="headerlink" title="最基础"></a>最基础</h5><h6 id="模块语法"><a href="#模块语法" class="headerlink" title="模块语法"></a>模块语法</h6><h6 id="条件-循环"><a href="#条件-循环" class="headerlink" title="条件/循环"></a>条件/循环</h6><h6 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h6><h6 id="监听属性"><a href="#监听属性" class="headerlink" title="监听属性"></a>监听属性</h6><h6 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h6><h6 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h6><h6 id="…-3"><a href="#…-3" class="headerlink" title="….."></a>…..</h6><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><h6 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h6><h6 id="Prop"><a href="#Prop" class="headerlink" title="Prop"></a>Prop</h6><h6 id="事件-1"><a href="#事件-1" class="headerlink" title="事件"></a>事件</h6><h6 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h6><h6 id="动态和异步"><a href="#动态和异步" class="headerlink" title="动态和异步"></a>动态和异步</h6><h5 id="路由———vue-router"><a href="#路由———vue-router" class="headerlink" title="路由———vue-router"></a>路由———vue-router</h5><h5 id="状态管理——Vuex"><a href="#状态管理——Vuex" class="headerlink" title="状态管理——Vuex"></a>状态管理——Vuex</h5><h5 id="HTTP请求——axios"><a href="#HTTP请求——axios" class="headerlink" title="HTTP请求——axios"></a>HTTP请求——axios</h5><h5 id="服务器端渲染——Nuxt-js"><a href="#服务器端渲染——Nuxt-js" class="headerlink" title="服务器端渲染——Nuxt.js"></a>服务器端渲染——Nuxt.js</h5><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><h5 id="Redux（推荐）"><a href="#Redux（推荐）" class="headerlink" title="Redux（推荐）"></a>Redux（推荐）</h5><h5 id="React-router（推荐）"><a href="#React-router（推荐）" class="headerlink" title="React-router（推荐）"></a>React-router（推荐）</h5><h5 id="Mobx（备选）"><a href="#Mobx（备选）" class="headerlink" title="Mobx（备选）"></a>Mobx（备选）</h5><h5 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h5><h5 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h5><h5 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h5><h5 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h5><h4 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h4><h5 id="Rx-JS"><a href="#Rx-JS" class="headerlink" title="Rx.JS"></a>Rx.JS</h5><h5 id="NgRx"><a href="#NgRx" class="headerlink" title="NgRx"></a>NgRx</h5><h3 id="CSS框架与CSS优化方案"><a href="#CSS框架与CSS优化方案" class="headerlink" title="CSS框架与CSS优化方案"></a>CSS框架与CSS优化方案</h3><h4 id="CSS框架"><a href="#CSS框架" class="headerlink" title="CSS框架"></a>CSS框架</h4><h5 id="Antd（推荐）"><a href="#Antd（推荐）" class="headerlink" title="Antd（推荐）"></a>Antd（推荐）</h5><h5 id="Element-UI（推荐）"><a href="#Element-UI（推荐）" class="headerlink" title="Element UI（推荐）"></a>Element UI（推荐）</h5><h5 id="Material-UI"><a href="#Material-UI" class="headerlink" title="Material UI"></a>Material UI</h5><h4 id="CSS优化方案"><a href="#CSS优化方案" class="headerlink" title="CSS优化方案"></a>CSS优化方案</h4><h5 id="Styled-Component（推荐）"><a href="#Styled-Component（推荐）" class="headerlink" title="Styled Component（推荐）"></a>Styled Component（推荐）</h5><h5 id="CSS-Modules（推荐）"><a href="#CSS-Modules（推荐）" class="headerlink" title="CSS Modules（推荐）"></a>CSS Modules（推荐）</h5><h5 id="Styled-JSX"><a href="#Styled-JSX" class="headerlink" title="Styled JSX"></a>Styled JSX</h5><h3 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h3><h4 id="自动化构建"><a href="#自动化构建" class="headerlink" title="自动化构建"></a>自动化构建</h4><h5 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h5><h5 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h5><h5 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h5><h4 id="模块化打包"><a href="#模块化打包" class="headerlink" title="模块化打包"></a>模块化打包</h4><h5 id="Webpack-推荐"><a href="#Webpack-推荐" class="headerlink" title="Webpack(推荐)"></a>Webpack(推荐)</h5><h5 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h5><h5 id="parcel"><a href="#parcel" class="headerlink" title="parcel"></a>parcel</h5><h5 id="Snowpack"><a href="#Snowpack" class="headerlink" title="Snowpack"></a>Snowpack</h5><h4 id="……-1"><a href="#……-1" class="headerlink" title="……."></a>…….</h4><h3 id="CSS预处理工具"><a href="#CSS预处理工具" class="headerlink" title="CSS预处理工具"></a>CSS预处理工具</h3><h4 id="Sass（推荐）"><a href="#Sass（推荐）" class="headerlink" title="Sass（推荐）"></a>Sass（推荐）</h4><h4 id="Less"><a href="#Less" class="headerlink" title="Less"></a>Less</h4><h4 id="PostCSS（推荐）"><a href="#PostCSS（推荐）" class="headerlink" title="PostCSS（推荐）"></a>PostCSS（推荐）</h4><h4 id="Stylus"><a href="#Stylus" class="headerlink" title="Stylus"></a>Stylus</h4><h3 id="校验-格式化-规范化"><a href="#校验-格式化-规范化" class="headerlink" title="校验/格式化/规范化"></a>校验/格式化/规范化</h3><h4 id="类型校验"><a href="#类型校验" class="headerlink" title="类型校验"></a>类型校验</h4><h5 id="TypeScript（推荐）"><a href="#TypeScript（推荐）" class="headerlink" title="TypeScript（推荐）"></a>TypeScript（推荐）</h5><h5 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h5><h4 id="Linter-amp-Formatter"><a href="#Linter-amp-Formatter" class="headerlink" title="Linter&amp;Formatter"></a>Linter&amp;Formatter</h4><h5 id="ESlint"><a href="#ESlint" class="headerlink" title="ESlint"></a>ESlint</h5><h5 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h5><h4 id="编码的规范"><a href="#编码的规范" class="headerlink" title="编码的规范"></a>编码的规范</h4><h5 id="JavaScript-Style-Guide"><a href="#JavaScript-Style-Guide" class="headerlink" title="JavaScript Style Guide"></a>JavaScript Style Guide</h5><h5 id="CSS-Style-Guide"><a href="#CSS-Style-Guide" class="headerlink" title="CSS Style Guide"></a>CSS Style Guide</h5><h5 id="React-Style-Guide"><a href="#React-Style-Guide" class="headerlink" title="React Style Guide"></a>React Style Guide</h5><h4 id="…-4"><a href="#…-4" class="headerlink" title="…."></a>….</h4><h3 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h3><h4 id="jest"><a href="#jest" class="headerlink" title="jest"></a>jest</h4><h4 id="Mocha"><a href="#Mocha" class="headerlink" title="Mocha"></a>Mocha</h4><h3 id="前端性能"><a href="#前端性能" class="headerlink" title="前端性能"></a>前端性能</h3><h4 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h4><h5 id="首次绘制（FP）"><a href="#首次绘制（FP）" class="headerlink" title="首次绘制（FP）"></a>首次绘制（FP）</h5><h5 id="首次内容绘制（FCP）"><a href="#首次内容绘制（FCP）" class="headerlink" title="首次内容绘制（FCP）"></a>首次内容绘制（FCP）</h5><h5 id="首次有效绘制（FMP）"><a href="#首次有效绘制（FMP）" class="headerlink" title="首次有效绘制（FMP）"></a>首次有效绘制（FMP）</h5><h5 id="主要元素时间点（HET）"><a href="#主要元素时间点（HET）" class="headerlink" title="主要元素时间点（HET）"></a>主要元素时间点（HET）</h5><h5 id="可交互时间（TTL）"><a href="#可交互时间（TTL）" class="headerlink" title="可交互时间（TTL）"></a>可交互时间（TTL）</h5><h4 id="性能测试-监控工具"><a href="#性能测试-监控工具" class="headerlink" title="性能测试/监控工具"></a>性能测试/监控工具</h4><h5 id="WebpageTest"><a href="#WebpageTest" class="headerlink" title="WebpageTest"></a>WebpageTest</h5><h5 id="Lighthouse"><a href="#Lighthouse" class="headerlink" title="Lighthouse"></a>Lighthouse</h5><h5 id="Performance工具"><a href="#Performance工具" class="headerlink" title="Performance工具"></a>Performance工具</h5><h5 id="RALL模型"><a href="#RALL模型" class="headerlink" title="RALL模型"></a>RALL模型</h5><h5 id="DevTools"><a href="#DevTools" class="headerlink" title="DevTools"></a>DevTools</h5><h5 id="…-5"><a href="#…-5" class="headerlink" title="….."></a>…..</h5><h4 id="性能优化方案"><a href="#性能优化方案" class="headerlink" title="性能优化方案"></a>性能优化方案</h4><h5 id="网络层面的优化"><a href="#网络层面的优化" class="headerlink" title="网络层面的优化"></a>网络层面的优化</h5><h6 id="请求优化"><a href="#请求优化" class="headerlink" title="请求优化"></a>请求优化</h6><h6 id="资源优化"><a href="#资源优化" class="headerlink" title="资源优化"></a>资源优化</h6><h6 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h6><h6 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h6><h6 id="…-6"><a href="#…-6" class="headerlink" title="…."></a>….</h6><h5 id="渲染层面的优化"><a href="#渲染层面的优化" class="headerlink" title="渲染层面的优化"></a>渲染层面的优化</h5><h6 id="CSS-JS优化"><a href="#CSS-JS优化" class="headerlink" title="CSS/JS优化"></a>CSS/JS优化</h6><h6 id="DOM优化"><a href="#DOM优化" class="headerlink" title="DOM优化"></a>DOM优化</h6><h6 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h6><h6 id="………-1"><a href="#………-1" class="headerlink" title="………"></a>………</h6><h4 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h4><h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><h4 id="骨架屏"><a href="#骨架屏" class="headerlink" title="骨架屏"></a>骨架屏</h4><h3 id="封装库-工具库（内容选学）"><a href="#封装库-工具库（内容选学）" class="headerlink" title="封装库/工具库（内容选学）"></a>封装库/工具库（内容选学）</h3><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><h5 id="Highcharts"><a href="#Highcharts" class="headerlink" title="Highcharts"></a>Highcharts</h5><h5 id="Echarts（推荐）"><a href="#Echarts（推荐）" class="headerlink" title="Echarts（推荐）"></a>Echarts（推荐）</h5><h5 id="AntV"><a href="#AntV" class="headerlink" title="AntV"></a>AntV</h5><h5 id="D3-js（）"><a href="#D3-js（）" class="headerlink" title="D3.js（）"></a>D3.js（）</h5><h4 id="服务端渲染SSR"><a href="#服务端渲染SSR" class="headerlink" title="服务端渲染SSR"></a>服务端渲染SSR</h4><h6 id="Next-js-React"><a href="#Next-js-React" class="headerlink" title="Next js(React)"></a>Next js(React)</h6><h6 id="Nuxt-js-Vue"><a href="#Nuxt-js-Vue" class="headerlink" title="Nuxt js(Vue)"></a>Nuxt js(Vue)</h6><h4 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h4><h5 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h5><h5 id="Semantic-UI"><a href="#Semantic-UI" class="headerlink" title="Semantic UI"></a>Semantic UI</h5><h5 id="Foindation"><a href="#Foindation" class="headerlink" title="Foindation"></a>Foindation</h5><h5 id="Layui"><a href="#Layui" class="headerlink" title="Layui"></a>Layui</h5><h4 id="编辑器-1"><a href="#编辑器-1" class="headerlink" title="编辑器"></a>编辑器</h4><h5 id="TintMCE"><a href="#TintMCE" class="headerlink" title="TintMCE"></a>TintMCE</h5><h5 id="UEditor"><a href="#UEditor" class="headerlink" title="UEditor"></a>UEditor</h5><h5 id="CKEditor"><a href="#CKEditor" class="headerlink" title="CKEditor"></a>CKEditor</h5><h5 id="Draft-js"><a href="#Draft-js" class="headerlink" title="Draft.js"></a>Draft.js</h5><h5 id="Slate-js"><a href="#Slate-js" class="headerlink" title="Slate.js"></a>Slate.js</h5><h5 id="……-2"><a href="#……-2" class="headerlink" title="……."></a>…….</h5><h4 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h4><h5 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h5><h5 id="iView"><a href="#iView" class="headerlink" title="iView"></a>iView</h5><h5 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h5><h5 id="Material-UI-1"><a href="#Material-UI-1" class="headerlink" title="Material UI"></a>Material UI</h5><h5 id="……-3"><a href="#……-3" class="headerlink" title="…….."></a>……..</h5><h4 id="动画-1"><a href="#动画-1" class="headerlink" title="动画"></a>动画</h4><h5 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a>Animate.css</h5><h5 id="Anime-js"><a href="#Anime-js" class="headerlink" title="Anime.js"></a>Anime.js</h5><h5 id="mo-js"><a href="#mo-js" class="headerlink" title="mo.js"></a>mo.js</h5><h5 id="……-4"><a href="#……-4" class="headerlink" title="…….."></a>……..</h5><h4 id="mock数据"><a href="#mock数据" class="headerlink" title="mock数据"></a>mock数据</h4><h5 id="Mock-js"><a href="#Mock-js" class="headerlink" title="Mock.js"></a>Mock.js</h5><h5 id="…-7"><a href="#…-7" class="headerlink" title="….."></a>…..</h5><h4 id="实用工具库"><a href="#实用工具库" class="headerlink" title="实用工具库"></a>实用工具库</h4><h5 id="UnderScore"><a href="#UnderScore" class="headerlink" title="UnderScore"></a>UnderScore</h5><h5 id="Lodash"><a href="#Lodash" class="headerlink" title="Lodash"></a>Lodash</h5><h4 id="日期处理库"><a href="#日期处理库" class="headerlink" title="日期处理库"></a>日期处理库</h4><h5 id="Moment-js"><a href="#Moment-js" class="headerlink" title="Moment.js"></a>Moment.js</h5><h4 id="字体-图标"><a href="#字体-图标" class="headerlink" title="字体/图标"></a>字体/图标</h4><h5 id="Font-Awesome"><a href="#Font-Awesome" class="headerlink" title="Font Awesome"></a>Font Awesome</h5><h5 id="lconfont"><a href="#lconfont" class="headerlink" title="lconfont"></a>lconfont</h5><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h2 id="第二个半阶段（检验学习）"><a href="#第二个半阶段（检验学习）" class="headerlink" title="第二个半阶段（检验学习）"></a>第二个半阶段（检验学习）</h2><h3 id="测试复习回顾"><a href="#测试复习回顾" class="headerlink" title="测试复习回顾"></a>测试复习回顾</h3><h4 id="jest-1"><a href="#jest-1" class="headerlink" title="jest"></a>jest</h4><h4 id="Enzyme"><a href="#Enzyme" class="headerlink" title="Enzyme"></a>Enzyme</h4><h4 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h4><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><h4 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h4><h4 id="E2E测试"><a href="#E2E测试" class="headerlink" title="E2E测试"></a>E2E测试</h4><p>以及前面所学到的所有知识都应该做出总结推荐写成脑图、文章、视频，这样做可以很好的帮助记忆</p><p>好记性不如烂笔头，输入并输出。</p><h2 id="第三阶段（专业）"><a href="#第三阶段（专业）" class="headerlink" title="第三阶段（专业）"></a>第三阶段（专业）</h2><h3 id="多端-跨端-融合"><a href="#多端-跨端-融合" class="headerlink" title="多端/跨端/融合"></a>多端/跨端/融合</h3><h4 id="移动端应用"><a href="#移动端应用" class="headerlink" title="移动端应用"></a>移动端应用</h4><h6 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h6><h6 id="Weex"><a href="#Weex" class="headerlink" title="Weex"></a>Weex</h6><h6 id="hybrid"><a href="#hybrid" class="headerlink" title="hybrid"></a>hybrid</h6><h6 id="Fluttef"><a href="#Fluttef" class="headerlink" title="Fluttef"></a>Fluttef</h6><h5 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h5><h6 id="Chrome-Devtools"><a href="#Chrome-Devtools" class="headerlink" title="Chrome Devtools"></a>Chrome Devtools</h6><h6 id="Android-Simulator"><a href="#Android-Simulator" class="headerlink" title="Android Simulator"></a>Android Simulator</h6><h6 id="IOS-Simulator"><a href="#IOS-Simulator" class="headerlink" title="IOS  Simulator"></a>IOS  Simulator</h6><h4 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h4><h5 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h5><h6 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h6><h6 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h6><h6 id="头条"><a href="#头条" class="headerlink" title="头条"></a>头条</h6><h5 id="跨端解决方案"><a href="#跨端解决方案" class="headerlink" title="跨端解决方案"></a>跨端解决方案</h5><h6 id="Taro-推荐"><a href="#Taro-推荐" class="headerlink" title="Taro(推荐)"></a>Taro(推荐)</h6><h6 id="uni-app-推荐"><a href="#uni-app-推荐" class="headerlink" title="uni-app(推荐)"></a>uni-app(推荐)</h6><h6 id="Chameleon"><a href="#Chameleon" class="headerlink" title="Chameleon"></a>Chameleon</h6><h4 id="桌面应用"><a href="#桌面应用" class="headerlink" title="桌面应用"></a>桌面应用</h4><h5 id="Electron-推荐"><a href="#Electron-推荐" class="headerlink" title="Electron(推荐)"></a>Electron(推荐)</h5><h5 id="NW-js"><a href="#NW-js" class="headerlink" title="NW.js"></a>NW.js</h5><h3 id="静态站点的构建"><a href="#静态站点的构建" class="headerlink" title="静态站点的构建"></a>静态站点的构建</h3><h4 id="GatsbtJS-推荐"><a href="#GatsbtJS-推荐" class="headerlink" title="GatsbtJS(推荐)"></a>GatsbtJS(推荐)</h4><h4 id="VuePress-推荐"><a href="#VuePress-推荐" class="headerlink" title="VuePress(推荐)"></a>VuePress(推荐)</h4><h4 id="Docusaurus"><a href="#Docusaurus" class="headerlink" title="Docusaurus"></a>Docusaurus</h4><h4 id="Hexo-我自己现在在用的"><a href="#Hexo-我自己现在在用的" class="headerlink" title="Hexo(我自己现在在用的)"></a>Hexo(我自己现在在用的)</h4><h3 id="前端测试"><a href="#前端测试" class="headerlink" title="前端测试"></a>前端测试</h3><h4 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h4><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><h4 id="大规模并发测试"><a href="#大规模并发测试" class="headerlink" title="大规模并发测试"></a>大规模并发测试</h4><h4 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h4><h3 id="Linux运维"><a href="#Linux运维" class="headerlink" title="Linux运维"></a>Linux运维</h3><h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><h4 id="基础知识和命令"><a href="#基础知识和命令" class="headerlink" title="基础知识和命令"></a>基础知识和命令</h4><h4 id="远程连接和SSH"><a href="#远程连接和SSH" class="headerlink" title="远程连接和SSH"></a>远程连接和SSH</h4><h4 id="文本编辑与版本控制"><a href="#文本编辑与版本控制" class="headerlink" title="文本编辑与版本控制"></a>文本编辑与版本控制</h4><h4 id="网络和安全"><a href="#网络和安全" class="headerlink" title="网络和安全"></a>网络和安全</h4><h4 id="Shell脚本编写"><a href="#Shell脚本编写" class="headerlink" title="Shell脚本编写"></a>Shell脚本编写</h4><h4 id="管理服务器和服务"><a href="#管理服务器和服务" class="headerlink" title="管理服务器和服务"></a>管理服务器和服务</h4><h4 id="内存与磁盘管理"><a href="#内存与磁盘管理" class="headerlink" title="内存与磁盘管理"></a>内存与磁盘管理</h4><h4 id="Nginx服务器配置"><a href="#Nginx服务器配置" class="headerlink" title="Nginx服务器配置"></a>Nginx服务器配置</h4><h2 id="第四阶段（自由solo）"><a href="#第四阶段（自由solo）" class="headerlink" title="第四阶段（自由solo）"></a>第四阶段（自由solo）</h2><h3 id="Web-components"><a href="#Web-components" class="headerlink" title="Web components?"></a>Web components?</h3><h3 id="PWA-1"><a href="#PWA-1" class="headerlink" title="PWA?"></a>PWA?</h3><h3 id="web-Assembly"><a href="#web-Assembly" class="headerlink" title="web Assembly?"></a>web Assembly?</h3><img src="https://pic3.zhimg.com/v2-5b498aef0fc2f736b56c572a1d6dd1e6_r.jpg" alt="前端学习路线图" style="zoom: 33%;">]]></content>
      
      
      <categories>
          
          <category> 大前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/4.html"/>
      <url>posts/4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java流程控制（Process-Control-）"><a href="#Java流程控制（Process-Control-）" class="headerlink" title="Java流程控制（Process Control ）"></a>Java流程控制（Process Control ）</h2><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>用户交互Scanner（获取用户输入）</li><li>顺序结构</li><li>选择结构</li><li>循环结构</li><li>break &amp; continue</li><li>练习 </li></ul><h3 id="Scanner对象"><a href="#Scanner对象" class="headerlink" title="Scanner对象"></a>Scanner对象</h3><p>我们可以通过Scanner类来获取用户的输入在Java的包里（java.util.Scanner）</p><p>代码里就可以这样用了</p><pre class=" language-java"><code class="language-java">Scanner s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过Scanner类的next()与nextLine()方法获取输入字符串 （让用户输入）</p><p>在读取前我们一般使用hasNext()可以理解为是否还有下一个与hasNextLine()还是否有下一行判断是否还有输入的数据</p><ul><li>next()<ol><li>一定要读取到有效字符后才可以结束输入</li><li>对输入的有效字符之前遇到的空白，next（）方法会自动将其去掉</li><li>只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符</li><li><strong>next（）不能得到带有空格的字符串</strong></li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个扫描对象，用于接收键盘数据</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先告诉电脑需要用Scanner这个方法接收数据</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用next方式接收："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断用户有没有输入字符串</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//让电脑判断用户有没有输入数据并接收数据</span>            <span class="token comment" spellcheck="true">//使用next方式接收</span>            String str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出的内容是："</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//让电脑输出接收到的用户输入的数据</span>            <span class="token comment" spellcheck="true">//这个如果输出Hello wroid   这个只会输出Hello 因为这个是以空格符为终止符</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//凡是IO流的类如果不关闭就会一直占用资源，要养成良好的习惯用完就管闭</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>nextLine()<ol><li>以Enter为结束符nextLine方法返回的是回车前的所有字符</li><li>可以获得空白符</li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_03</span> <span class="token punctuation">{</span>                              <span class="token comment" spellcheck="true">//运用nextLine方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//告诉电脑需要运用Scanner方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"(运用nextLine)请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//运用Scanner中的nextLine方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">//判断是否还有输入</span>            String str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//告诉电脑运用NextLine来输出得到的数据</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出的数据"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//这个如果输出Hello wroid   这个就能够全部输出Hello Worid</span>            <span class="token comment" spellcheck="true">//这个是以回车符为终止符</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//将IO流的类结束</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据是"</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Scanner进阶使用"><a href="#Scanner进阶使用" class="headerlink" title="Scanner进阶使用"></a>Scanner进阶使用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Scanner<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_05</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 1.可以输入多个数字         * 2.并求其总和和平均数         * 3.每输入一个数用回车确认         * 4.通过输入非数字来结束输入并输出结果；         */</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//求和(这里是先解决求和的需求)</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">//计算输入的所有数字之和</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m作为记录输入次数</span>        <span class="token comment" spellcheck="true">//通过循环判断是否还有输入，并在里面对每一次进行求和和统计</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">double</span> x <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m <span class="token operator">=</span> <span class="token operator">++</span>m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里不能用m++ 为什么自己先想想            sum = sum + x;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的次数为"</span><span class="token operator">+</span>m<span class="token operator">+</span><span class="token string">"结果是sum+"</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"如需结束请输入非数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token string">"输入和总和为"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token string">"总和的平均数为"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>sum <span class="token operator">/</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><ol><li><p>Java的基本结构就是顺序结构，除非特别指出，否则就按照顺序一句一句执行。</p></li><li><p>顺序结构是最简单的算法结构</p></li><li><p>语句与语句之间，框与框之间是按从上到下的顺序进行的，它是由若干个依次执行的处理步骤</p><p>组成的，它是任何一个算法都离不开的一种基本算法结构</p></li></ol><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><ol><li><p>if单选结构</p><ul><li><p>我们很多时候要去判断一个东西是否可行，然后我们才去执行，这样一个过程在程序中使用if语句来表示</p></li><li><p>语法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span>（布尔表达式）<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果表达式为true将执行的语句</span>    <span class="token comment" spellcheck="true">//这个其实就是判断条件是否满足</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//这个是当判断不满足时执行的</span><span class="token punctuation">}</span></code></pre><p>单选择结构</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//if单选择语句的运用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//equals 是判断字符串</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre></li></ul></li><li><p>if双选结构</p><ol><li><p>假设现在的需求是某公司收购一个软件，成功了，给人支付一百万，失败了，自己找人开发这样的需求</p><p>用一个if就搞不定了，我们需要一个双选择结构，所以就有了if，else机构</p></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> struch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome0_03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>if多选结构<ul><li>真是情况还可能有ABCD等多个区间多级判断，比如90-100是优  良中 差等，在我们生活中很多时候也不仅仅只有两个，所以我们需要一个多选择结构来处理这类问题</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> struch<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> score <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"满分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">80</span><span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">70</span><span class="token operator">&amp;&amp;</span> score<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>score<span class="token operator">>=</span><span class="token number">60</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">&lt;</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"C级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> score<span class="token operator">&lt;</span><span class="token number">60</span><span class="token operator">&amp;&amp;</span>score<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"D级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入不合法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**        if语句至少有1个else语句在所有的else if语句之后        if语句可以有若干else if语句它们必须在else之前        在其中一个else if语句检测为true，其他的else if以及else都将跳过执行        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li><p>嵌套结构</p><p>使用嵌套的if else语句是合法的，也就是说你可以在另一个if或者else if语句中使用if 或者else if语句</p><p>也可以像if语句一样嵌套else if else</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果布尔表达式1的值为true执行代码</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果布尔表达式2的值true执行代码        </span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>思考我们需要寻找一个数，在1-100之间 </p><ol start="5"><li><p>switch多选结构</p><ol><li><p>多选择结构还有一个实现方式就是switch case语句。</p></li><li><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支</p></li><li><p>switch 语句中的变量类型可以是</p><ul><li><p>byte，short，int或者char。</p></li><li><p>从java SE 7开始</p></li><li><p>switch 支持字符串String类型了</p></li><li><p>同时case标签必须为字符串常量或字面量</p><pre class=" language-java"><code class="language-java"><span class="token function">Switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">case</span> value<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//语句</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可选</span>    <span class="token keyword">case</span> value <span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//语句</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//你可以有任意数量的case语句</span>    <span class="token keyword">default</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可选</span>    <span class="token comment" spellcheck="true">//语句</span><span class="token punctuation">}</span></code></pre></li></ul></li></ol></li></ol></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//case穿透，switch 匹配一个具体的值</span>        <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'F'</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"优秀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'B'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"良好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"努力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'E'</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挂科"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未知"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String name <span class="token operator">=</span> <span class="token string">"某某"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//JDK7的新特性，表达式结果可以是字符串</span>        <span class="token comment" spellcheck="true">//字符的本质还是数字</span>        <span class="token comment" spellcheck="true">//反编译 java----class（字节码文件）---反编译（IDEA）</span><span class="token comment" spellcheck="true">//去查找到class文件然后在再IDEA里面找到.Java存放的位置直接把.class文件拷贝进去就可以实现反编译了</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> <span class="token string">"秦"</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">"狂"</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"啥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>###循环结构</p><p>####while循环</p><p>while 是最基本的循环，它的结构为</p><pre class=" language-java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//循环内容</span><span class="token punctuation">}</span></code></pre><ol><li>只要布尔表达式为true，循环就会一直执行下去</li><li>我们大对数情况是会让循环停止下来的，我们需要一个让表达式失效的方式来结束循环</li><li>少部分情况需要循环一直执行，比如服务器的请求响应监听等。</li><li>循环条件一直为true就会造成无线循环【死循环】，我们正常的业务编程中应该尽量避免死循环</li></ol><p>会影响程序性能或者造成程序卡死崩溃</p><ol start="5"><li>思考1+2+3+—–100=？</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Cycle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_01</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//实现从1+到100</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        b <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        a<span class="token operator">++</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结果为："</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>知道一个求和公式，就是（首项+末项）乘以项数除以2，首项就是第一个数，在这里是1，末项就是最后一个数，在这里就是100，项数就是你一共加了多少个数，在这里就是100，所以套在公式里就是：（1+100）×100÷2=5050。</p><ul><li><p>do  while循环</p><ol><li><p>对于while而言，如果不满足条件，则不能进入循环。但有时候我们需即使不满足条件</p><p>也至少执行一次</p></li><li><p>do…..while循环和while循环相似，不同的是，do….while循环至少会执行一次</p><pre class=" language-java"><code class="language-java"><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码语句</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span>；</code></pre></li><li><p>while和do…while的区别</p><ul><li>while先判断后执行，do…while是先执行后判断</li><li>Do …..while总是保证循环体会被至少执行一次！这是他们的主要差别。</li></ul></li></ol></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Cycle<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//do....while</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里可以看见进来后程序判断i不小于0所以不执行后面</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"//////////////////分割线////////////////"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//这里可以看见是先进入程序之后判断 所以才会输出下方的结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>####for循环（重要）</p><ol><li><p>虽然所有循环结构都可以用while或者do….while表示，但java提供了另一种语句</p><p>for循环，使用一些循环结构变得更加简单。</p></li><li><p>for循环语句是支持迭代的一种通用结构，<strong>是最有效，最灵活的循环结构。</strong></p></li><li><p>for循环执行的次数实在执行前就确定的，语法格式如下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化；布尔表达式；更新<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//代码语句</span><span class="token punctuation">}</span><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_for</span> <span class="token punctuation">{</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>           <span class="token keyword">while</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>               a<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"while结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"for结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">/*       关于for 循环有以下几点说明       最先执行初始化化步骤，可以产生一种类型，但可初始化一个或多个循环变量，也可以是空语句。       然后，监测布尔表达式的值，如果为true，循环体被执行，如果为false，循环终止，开始执行循环体后面的语句       执行一次循环后，更新循环控制变量（迭代因子控制循环变量增减）       再次监测布尔表达式，循环执行上面的过程        */</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>      </code></pre><p>可以运用100.for 的输入进行快捷操作</p><p>####练习1计算0到100之间的奇数和偶数的和</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">for_Dome02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//就算0-100之间的奇数和偶数的和</span>        <span class="token comment" spellcheck="true">//奇数不能被二整数</span>        <span class="token keyword">int</span> js <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//定义奇数的和为0</span>        <span class="token keyword">int</span> os <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//定义偶数的和为0</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>a<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//写一个循环从1-100</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//循环进入if判断如果a取余2不等于等证明是奇数</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"是奇数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               js <span class="token operator">=</span> a<span class="token operator">+</span>js<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//奇数的和就等于js+上a</span>           <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//下面的思路和上面一样</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">"是偶数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               os <span class="token operator">=</span> a<span class="token operator">+</span>os<span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奇数和为"</span><span class="token operator">+</span>js<span class="token operator">+</span><span class="token string">"\n偶数和为"</span><span class="token operator">+</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>####练习2用while或for循环输出1-1000之间能被5整除的数，并且输出3个</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">for_Dome03</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//练习2用while或for循环输出1-1000之间能被5整除的数，并且输出3个</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">/*这里一开始没搞懂思路 后来看了一下应该是刚好输出的第三个数%15等于0其他                都不可以*/</span>            <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>练习3打印99乘法表</p><h4 id="乘法表"><a href="#乘法表" class="headerlink" title="乘法表"></a>乘法表</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> Switch<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_02</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需求做一个乘法表1-9</span>    <span class="token comment" spellcheck="true">/*    逻辑    1.我们需要2个乘数分别作为乘数与别被乘数，还需要一个数作为积    2.两个数开始为1循环开始如果被乘数小于或者等于9时两个数相乘    结果等于第三个数，同时两个数自增     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>b<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">"\t "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//经验这种类型可以看做一列一列然后先解决没列想象成列</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span>a<span class="token operator">+</span><span class="token string">"="</span><span class="token operator">+</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*         这里看到两个for循环圈，我们可以看做每个循环圈分别定义一个变量，然后根据优先级         不同的原因进行运算，          */</span></code></pre><p>很多种写法</p></li></ol><ul><li>在Java5中引入了一种主要用于数组的增强型for循环 </li></ul>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/2.html"/>
      <url>posts/2.html</url>
      
        <content type="html"><![CDATA[<h3 id="命名风格"><a href="#命名风格" class="headerlink" title="命名风格"></a>命名风格</h3><p>学习资源来自阿里巴巴编程手册（泰山板）</p><h4 id="强制执行"><a href="#强制执行" class="headerlink" title="强制执行"></a>强制执行</h4><ol><li><p>代码中不能使用<strong>下划线美元符号开头和结束</strong></p></li><li><p><strong>所有的命名</strong>严禁使用拼音和英文混合方式，更不允许直接使用中文</p><p>尽量避免采用拼音</p></li><li><p><strong>类名</strong>强制使用UpperCamelCase风格（也就是每个单词开头大写的意思）</p><p>但是DO/BO/DTO/VO/AO/PO/UID等例外可以理解成本来就是大写的一些名称</p></li><li><p><strong>方法名、参数名、成员变量、局部变量</strong>都统一使用lowerCamelCase风格（也就是开头小写后面每个单词开头大写的意思）</p></li><li><p><strong>常量</strong>命名应全部使用大写单词之间使用<strong>下划线</strong>需要完整清楚，不用怕名字长</p></li><li><p><strong>抽象类</strong>命名使用Abstract或Base开头，<strong>异常类</strong>名使用Exception结尾，测试类命名以它要测试的类的名称开始以Tese结尾</p></li><li><p>类型与中括号紧挨相连来表示数组如在main参数中使用String args[] 来定义</p></li><li><p><strong>POJO类</strong>的任何布尔类型的变量都不要加is前缀，否侧部分框架解析会引起序列化的错误</p></li><li><p><strong>包名</strong>统一使用小写点分隔符之间仅有一个自然语句的英语第N次，包名统一使用单数形式，但类名如过有复数含义，类名可以使用复数形式。</p></li><li><p>避免在子父类的成员变量之间，或者不同代码块的局部变量之间采用完全相同的命名，使可读性降低</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/1.html"/>
      <url>posts/1.html</url>
      
        <content type="html"><![CDATA[<p>hello world    （你好世界）</p><p>public （公共）</p><p>class  （类）</p><p>int    （整数The integer）</p><p>Scanner    （扫描仪）</p><p>void    （空白   输入型）</p><p>main    （主要的）</p><p>method    （方法）</p><p>String    （字符串）</p><p>Variable    （变量）</p><p>scope    （范围）</p><p>static    （静态）</p><p>double    （双倍）</p><p>salary    （工资）</p><p>name    （名字）</p><p>age    （年龄）</p><p>println    （打印）</p><p>null    （无效的）</p><p>Constant    （常量）final </p><p>initialize（初始化）</p><p>instanceof      （运算符）</p><p>operator    （操作符）</p><p>boolean    (布尔)</p><p>score    （成绩）</p><p>bit    （比特）</p><p>byte    （字节）</p><p>define    （宏定义）</p><p>author    （作者）</p><p>version    （版本号）</p><p>process    （流程）</p><p>control    （控制）</p><p>learning    （学习）</p><p>grade    （分数）</p><p>cycle    （循环）</p><p>Looping statements    （循环语句）</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="posts/0.html"/>
      <url>posts/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li><p>注释、标识符、关键字</p><ul><li><p>用注释给程序员自己看以便更好的明白代码的意思</p></li></ul><p>养成书写注释的习惯非常重要</p><p>java中注释有三种</p><p>单行注释、多行注释、文档注释</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是单行注释</span>        <span class="token comment" spellcheck="true">/*这          是          多行注释*/</span>        <span class="token comment" spellcheck="true">//文档注释</span>        <span class="token comment" spellcheck="true">/*        * 可以@一些东西        *        * */</span>    <span class="token punctuation">}</span></code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>也就是被创造的名字，文件名不能用关键字</p><p>java所有的组成部分都需要名字、类名变量名以及方法名都被称为标识符。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这就是类名</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这就是方法名</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Helloworld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </code></pre><img src="https://pic3.zhimg.com/80/v2-9a48cb1ebc97ec3081e114354629bdfe_720w.jpg" style="zoom:80%;"><ul><li><p>标识符的注意点</p><p>所有的标识符都应该以字母（A-Z或者a-z），$、下划线开始</p><p>首字符之后可以以字母（A-Z或者a-z），$、下划线任何字符组合（但是比较特殊的符号不行）</p><p><strong>不能使用关键字作为变量名或者方法名</strong></p><p><strong>标识符大小敏感</strong></p><p>合法标识符：</p><pre class=" language-java"><code class="language-java">age、$sasdf、_ds、_1_sdsa</code></pre><p>非法标识符：</p><pre class=" language-java"><code class="language-java">123abc、<span class="token operator">-</span>sads、#abc</code></pre><p>可以用中文命名但是不建议运用，也不建议用拼音</p></li></ul></li><li><p>数据类型</p><p>1.强类型语言</p><p>要求变量的使用要严格符合规定，所有变量都必须先定义后才能使用</p><p>2.弱类型语言</p><p>要求较低没有太大的要求，但是有自己的特性</p><img src="https://pic1.zhimg.com/80/v2-3c2c511d2d8bb6897e65e2db335e7b74_720w.jpg"> <h3 id="Java的数据类型分为两大类"><a href="#Java的数据类型分为两大类" class="headerlink" title="Java的数据类型分为两大类"></a>Java的数据类型分为两大类</h3><ol><li>基本类型（primitive type）</li></ol><ul><li><p>整数类型</p><ul><li>byte 一个字节范围：-128~127.</li><li>short 二个字节：-32768~32767</li><li>int    四个字节：-2147483648~2147483647</li><li>long 八个字节： -9223372036854775808~923372036854775807</li></ul></li><li><p>浮点类型</p><ul><li>float  四个字节</li><li>double 八个字节</li></ul></li><li><p>字符类型</p><p>char  两个字节</p></li><li><p>boolean（布尔）类型  占一位 只有真（true）假（false）</p><p>true</p><p>false</p><ul><li>代码（必须记住的基础知识，记住了在往下看，要复习前面的知识）</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">data</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String a<span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//八大数据类型</span>        <span class="token comment" spellcheck="true">//整数的四大类型</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最常用</span>        <span class="token keyword">byte</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> num3 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num4 <span class="token operator">=</span> 30L；<span class="token comment" spellcheck="true">// long 一般加L后缀</span>        <span class="token comment" spellcheck="true">//小数，浮点数</span>        <span class="token keyword">float</span> num5 <span class="token operator">=</span> <span class="token number">50.1F</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//float类型需要在数字后面加后缀</span>        <span class="token keyword">double</span> num6 <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 字符</span>        <span class="token keyword">char</span> name <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串，String不是关键词，类</span>        String namea <span class="token operator">=</span> <span class="token string">"某某"</span>        <span class="token comment" spellcheck="true">//布尔值（boolean）</span>        <span class="token keyword">boolean</span> falg1 <span class="token operator">=</span> <span class="token boolean">true</span>；        <span class="token keyword">boolean</span> flag2 <span class="token operator">=</span> <span class="token boolean">false</span>；</code></pre></li></ul><ol start="2"><li><p>引用类型（reference type）</p><p>String</p></li></ol></li><li><p>变量，常量</p><ul><li><p>变量是什么：就是可以变化的量。</p></li><li><p>Java是一种强类型语言，每个变量都必须声明其类型</p></li><li><p>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和作用域。</p><pre class=" language-java"><code class="language-java">tvne varName <span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">,</span>varName<span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据类型 变量名 = 值；可以使用逗号隔开来声明多个同类型变量。</span></code></pre></li><li><p>注意事项：</p><ul><li>每个变量都有类型，类型可以是最基本类型，也可以是引用类型</li><li>变量名必须是合法的标识符</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li></ul></li></ul></li></ol><h3 id="数据类型扩展及面试题讲解"><a href="#数据类型扩展及面试题讲解" class="headerlink" title="数据类型扩展及面试题讲解"></a>数据类型扩展及面试题讲解</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">data_DOME02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数据扩展：进制 二进制 十进制 八进制 十六进制</span>        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> <span class="token number">010</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//八进制0</span>        <span class="token keyword">int</span> i3 <span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//十六进制0x  0-9  A-F</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//浮点数</span>        <span class="token comment" spellcheck="true">//float 表示有限的位数 离散 舍入误差 大约 接近但是不等于</span>        <span class="token comment" spellcheck="true">//不要完全使用浮点数进行比较</span>        <span class="token comment" spellcheck="true">//银行业务怎么去表示？  用 “BigDecimal” 数学工具类</span>        <span class="token keyword">float</span> f <span class="token operator">=</span> <span class="token number">0.1f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0.1</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0.1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>        <span class="token keyword">float</span> d1 <span class="token operator">=</span> <span class="token number">11111111111111111111f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> d2 <span class="token operator">=</span> d1 <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token operator">==</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">// 字符的拓展</span>        <span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'中'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制转换</span>        <span class="token comment" spellcheck="true">// 输出的结果 强制转换后  变成了表单里的数字</span>        <span class="token comment" spellcheck="true">/*所有的字符本质上还是数字（二进制）        编码 Unicode表 有2个字节的位置0 - 65535 之间*/</span>       <span class="token comment" spellcheck="true">// Unicode 表的表示</span>       <span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'\u0061'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结果 “a”</span>        <span class="token comment" spellcheck="true">//  转译字符如 /t 字符表 \n 换行  等等</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\nWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//思考题</span>        String sa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sa<span class="token operator">==</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span>        String sc <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>        String sd <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token operator">==</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>        <span class="token comment" spellcheck="true">//为什么两个输出结果不一样 应从内存分析</span>        <span class="token comment" spellcheck="true">//布尔值扩展 两种方式都可以</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>falg<span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//Less is More 代码需要精简易读</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li><p>由于java是强类型语言，所以要进行有些运算的时候，需要用到类型转换</p><p>低—————————————————————————————————高</p><p>(byte，short，char)–&gt; int–&gt; long–&gt;float( 小数的优先级大于整数)–double</p></li><li><p>运算中，不同类型的数据先转化为同一类型，然后进行运算</p></li><li><p>强制类型转换</p><p>（类型）变量名  高—-低</p></li><li><p>自动类型转换</p><p>低—-高</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Type_conversion</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制转换</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//结果i=128,b=-128, 因为byte就只有1个字节的范围也就是-128-~127</span>        <span class="token comment" spellcheck="true">//内存溢出就会出错</span>        <span class="token comment" spellcheck="true">//自动转换  低----高</span>        <span class="token keyword">byte</span> c <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">double</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//因为double位数是最大了(浮点类型里) 所以由低到高的转换不需要强制</span>        <span class="token comment" spellcheck="true">//注意点：</span>        <span class="token comment" spellcheck="true">/*        1.不能对布尔值进行转换        2.不能把对象类型转换为不相干的类型        3.在把高容量转换到低容量的时候，需要强制转换        4.转换的时候可能存在内容溢出，或者精度问题。        */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============分割线==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">23.7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//23</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">45.98f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-45  这两个就是会出现上述的精度问题</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============分割线=============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> d <span class="token operator">=</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//98</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//b</span>        <span class="token comment" spellcheck="true">//因为char是字符类型强制转换为int以后就成了编码里的数字，在将得到的</span>        <span class="token comment" spellcheck="true">//数转换为char类型就变成了b</span>        <span class="token comment" spellcheck="true">//操作比较大的数，注意溢出问题</span>        <span class="token comment" spellcheck="true">//JDK7新特性，数字之间可以用下划线分割</span>        <span class="token keyword">int</span> money <span class="token operator">=</span> 10_0000_0000<span class="token punctuation">;</span>        <span class="token keyword">int</span> years <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> total <span class="token operator">=</span> money<span class="token operator">*</span>years<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//-1474836480,计算时出现了溢出问题</span>        <span class="token comment" spellcheck="true">//那可以用long类型转换过来吗？</span>        <span class="token keyword">long</span> total2 <span class="token operator">=</span> money<span class="token operator">*</span>years<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//还是存在溢出，因为默认是int，转换前就存在问题。</span>        <span class="token comment" spellcheck="true">//那需要怎么才能解决问题呢？</span>        <span class="token keyword">long</span> total3 <span class="token operator">=</span> money<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>years<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先把一个数转换成long</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样就可以正确输出了</span>        <span class="token comment" spellcheck="true">//总结就是，不是只转换结果就行，需要把中间的变量也转换成需要的类型</span>     <span class="token comment" spellcheck="true">//在书写1000000L时用大写的L这是书写规范</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>变量是什么：就是可以变化的量</li><li>Java是一种强类型语言，每个变量都必须声明其类型。</li><li>Java变量是程序中最基本的存储单元，其要素包括变量名，变量类型和<strong>作用域</strong>、</li></ul><pre class=" language-java"><code class="language-java">tvne varName <span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token punctuation">,</span>varName<span class="token punctuation">[</span><span class="token operator">=</span>value<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据类型 变量名 = 值；可以使用逗号隔开来声明多个同类型变量。</span><span class="token comment" spellcheck="true">//如我们可以通过变量去操控内存中的数据</span><span class="token comment" spellcheck="true">/*现在我们需要指定一个箱子去放东西（数据类型），然后箱子里放入东西那放进去的东西得有名字（变量名），放进去的东西就不一定了我们喜欢放什么就放什么（值）这个值就是储存在内存里的东西我们现在只是在程序里调用它。*/</span></code></pre><p>注意事项：</p><ul><li><p>每个变量都有类型，类型可以是最基本类型，也可以是引用类型</p></li><li><p>变量名必须是合法的标识符</p></li><li><p>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">variable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//变量</span>        <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以在一行定义多个变量但是不建议这样做，可读性较差</span>        String name <span class="token operator">=</span> <span class="token string">"eag"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引用行</span>        <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token string">'X'</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//一定要保证程序的可读性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><ul><li><p>类变量</p></li><li><p>实例变量</p></li><li><p>局部变量</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> allclicks<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//类变量 （statin静态的）</span>    String str<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//实例变量 </span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//局部变量</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable_scope</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//类里面</span>    <span class="token comment" spellcheck="true">//属性：</span>    <span class="token comment" spellcheck="true">//类变量 static 从属于类</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> salary <span class="token operator">=</span><span class="token number">2500</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实例变量；从属于对象（对象也在类里面），可以在方法外</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//main方法这些都是写在类里面的</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//局部变量是写在方法里面的 它的生命周期就在这里面比如定义的变量就只能在这个方法里使用</span>        <span class="token comment" spellcheck="true">//必须声明初始化值</span>        <span class="token comment" spellcheck="true">//什么是对象可以理解为写的一个类这个类里面有写好的方法</span>        Variable_scope variable_scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Variable_scope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>variable_scope<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10 0  如果有定义的值的话就会输出其值，没有赋值的就输出默认值</span>        <span class="token comment" spellcheck="true">//这个类型的默认值0或者0.0</span>        <span class="token comment" spellcheck="true">//布尔值的默认值为false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>variable_scope<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//null 除了基本类型，其余的默认都是null</span>        <span class="token comment" spellcheck="true">//输出类变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//其他方法一个类里面可以写多个方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><ul><li><p>常量（Constant）：初始化（initialize）后不能再改变值！不会变动的值。</p></li><li><p>所谓常量可以理解成一种特殊的变量，它的值设定后，在程序运行中不允许被改变。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> 常量名 <span class="token operator">=</span> 值<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span></code></pre></li><li><p>常量名一般使用大写字符</p></li></ul><h4 id="变量的命名规范（重要这是书写规范）"><a href="#变量的命名规范（重要这是书写规范）" class="headerlink" title="变量的命名规范（重要这是书写规范）"></a>变量的命名规范（重要这是书写规范）</h4><ul><li><p>所有变量、方法、类名：<strong>见名知意</strong></p></li><li><p>类成员变量：首字母小写和驼峰原则：monthSalary，（除开第一个单词外后</p><p>面出现的单子首字母大写）</p></li><li><p>局部变量：首字母小写和驼峰原则</p></li><li><p>常量：大写字母和下划线：MAX_VALUE</p></li><li><p>类名：首字母大写和驼峰原则：Man，GoodMan</p></li><li><p>方法名：首字母小写和驼峰原则：run(),runRun()</p></li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><ul><li><p>Java语言支持如下运算符</p><ol><li><p>算数运算符：+、-、*、/、%（取余模运算）、++、–</p><pre class=" language-java"><code class="language-java">多个类型中如果有<span class="token keyword">long</span>或者<span class="token keyword">double</span>其中一个类型结果就为<span class="token keyword">long</span>或者<span class="token keyword">double</span>类型，如果没有就全部为<span class="token keyword">int</span>类型    <span class="token operator">%</span>取余运算如：<span class="token number">21</span><span class="token operator">%</span><span class="token number">10</span>会得到<span class="token number">1</span>因为他们相除余数为<span class="token number">1</span>，遇到除不尽的情况如<span class="token number">4</span><span class="token operator">%</span><span class="token number">8</span>他的余数就等于<span class="token number">4</span>本身</code></pre></li><li><p>赋值运算符：=</p></li><li><p>关系运算符：&gt;、&lt;、&gt;=、&lt;=、==、!=instanceof      </p><p>//关系运算符结果只有两个 正确（true）、错误（false）</p></li><li><p>逻辑运算符: &amp;&amp;、||、!      与或非 我与你，我或你，非你及我</p></li><li><p>位运算符:&amp;、|、^、~、&gt;&gt;、&lt;&lt;、&gt;&gt;&gt;(了解!!!)</p></li><li><p>条件运算符：? 、：</p></li><li><p>扩展赋值运算符：+=、-=、*=、/=</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> operator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dome_Operator02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ++ -- 自增 自减 一元运算符</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//a++ = 先运算a赋值得b然后在算a+1</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token operator">++</span>a<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//++a 先运算a+1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 幂运算  2^3   2*2*2  Java里没有这样的运算</span>        <span class="token comment" spellcheck="true">//但是Java里有这样的数学运算工具类</span>        <span class="token keyword">double</span> pow <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> operator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">operator03</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//逻辑运算符  与 或 非</span>        <span class="token keyword">boolean</span> a <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a &amp;&amp; b;"</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个变量都为真结果才为真</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a || b;"</span><span class="token operator">+</span><span class="token punctuation">(</span>a<span class="token operator">||</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//任何一个变量为真结果则为真 必须两个都为假结果才为假</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"! (a &amp;&amp; b);"</span><span class="token operator">+</span><span class="token operator">!</span> <span class="token punctuation">(</span>a<span class="token operator">&amp;&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//两个变量如果是真则为假，如果是假则为真</span>        <span class="token comment" spellcheck="true">//非运算和与运算 区别在与运算如果运算第一个变量为假时，就不会再向下运算了</span>        <span class="token comment" spellcheck="true">//但是非运算</span>       <span class="token comment" spellcheck="true">// 就需要两个变量都去运算和或也一样</span>        <span class="token comment" spellcheck="true">//短路运算就是与这样的，只要开始运算第一个变量为假那结果就为假了后面就不用运算了</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> d <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>c<span class="token operator">++</span><span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//结果为5充分说明（c++&lt;4）没有运算</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><pre><code>/*位运算符        A = 0011 1100        B = 0000 1101--------------------------------------------------------------------------------      与  A&amp;B  0000 1100  如果两个都为1则为1否则都为0  也是就说对应各位两个都是1才能是1 不然就是0      或  A|B  0011 1101  如果有1则为1    也就是说任意一个位只要出现1那就得1     异或 A^B  0011 0001  如果相同则为0，不同则为1  也就是说不管各位上是0还是1只要两个相同就是0不然就是1     取反  ~B  1111 0010  如果是0则为1，是1则为0   也就是说各位两个相比是0的就是1是1的就是0     （这里别看错是对B去反不是AB比较）     0 1也就是开或关  真或假         */        //面试题 2*8 如何运算最快   &lt;&lt;左移1位相当于*2   &gt;&gt;右移1位相当于/2        //8&lt;&lt;1或者2&lt;&lt;3位</code></pre></li></ul><h4 id="扩展的运算符"><a href="#扩展的运算符" class="headerlink" title="扩展的运算符"></a>扩展的运算符</h4><pre><code>int a = 10;int b = 20;a+=b; //a = a+ba-=b;// a = a-bSystem.out.println(a);//字符串连接符 + ，String   这个是面试题System.out.println(""+a+b);//1020  字符串在前面就按序列走System.out.println(a+b+"");//30 运算在前面就先运算</code></pre><p>####三元运算符</p><pre><code>//三元运算符 X ? y : z//如果x==true，则结果为y，否则结果为zint score = 80;String typa = score &gt;=80 ?"优秀":"优秀";String type = score &lt;60 ?"不及格":"及格";//必须掌握//if以后要学System.out.println(type+typa);</code></pre><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p>（）</p><h4 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h4><p>包的本质如同文件夹</p><p>规范一般用公司名倒置为包名</p><p>package 包语句的语法格式 系统自动写的</p><p>import 导入包 需要调用包时就用这个命令</p><p>一个包里面有多个类 import 包名.* 就是通配符 把所有类都通用。 </p><h3 id="Java-Doc-（Java-jdk帮助文档）"><a href="#Java-Doc-（Java-jdk帮助文档）" class="headerlink" title="Java Doc （Java jdk帮助文档）"></a>Java Doc （Java jdk帮助文档）</h3><ol><li>@author 作者名</li><li>@version 版本号</li><li>@since 指明需要最早使用的jdk版本</li><li>@param 参数名</li><li>@return 返回值情况</li><li>@throws 异常抛出情况</li></ol><p>javadoc encoding UTF-8 -charsot UTF-8</p><h4 id="如何在IDEA里直接导出帮助文档"><a href="#如何在IDEA里直接导出帮助文档" class="headerlink" title="如何在IDEA里直接导出帮助文档"></a>如何在IDEA里直接导出帮助文档</h4><p>1.选择需要导出Doc的包或者类</p><p>2.点击工具</p><p>3.点击生成Doc文档</p><p>4.选择存储位置，在Oclc行填入“-encoding UTF-8 -charset UTF-8”</p><p>5.点击确认</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吉他自学笔记</title>
      <link href="posts/d220.html"/>
      <url>posts/d220.html</url>
      
        <content type="html"><![CDATA[<h1 id="自学吉他的一点体会"><a href="#自学吉他的一点体会" class="headerlink" title="自学吉他的一点体会"></a>自学吉他的一点体会</h1><h3 id="所有的坚持都是因为热爱"><a href="#所有的坚持都是因为热爱" class="headerlink" title="所有的坚持都是因为热爱"></a>所有的坚持都是因为热爱</h3><h3 id="从哪里开始学习的吉他"><a href="#从哪里开始学习的吉他" class="headerlink" title="从哪里开始学习的吉他"></a>从哪里开始学习的吉他</h3><p>我记得当时在部队，娱乐室里有一把破破烂烂生锈的吉他，因为那个时候在部队休息时间没有手机可以玩，</p><p>所以鬼使神差的我去拿起了那把吉他，琴弦这些都是生锈的，而且也没有书籍可以学习一个人在哪里乱弹了几下</p><p>也就走了，来在军网上偶然间看到一个吉他的学习教程，就初步了解了吉他。再后来我买了我的第一本书和琴</p><p>“吉他三月通”和一把“拉维斯的入门级的琴”看到这里千万不要着急就去买琴买书，先看下去。</p><ul><li><p>有必要买书吗？买什么书呢？</p><p>说实话如多只想自己娱乐，或者一些普通的玩一下，我觉得没必要去买太多书，</p><p>有一本指导性的就行“民谣吉他考级标准教程（王鹰和马鸿老师的版本）”，当然如果你想走职业乐手</p><p>还是好好读书自己去考考音乐学院吧，如果你想自己以后组乐队玩感觉好像没有太大必要（当然以后学习乐理是很重要的先入门在考虑其它的吧），其它的网上找找教学视频吧“找成体系的教程”个人推荐课一看看“N7、果木浪子、或者吉他自学三月通的教学视频”</p></li><li><p>买什么吉他？预算多少？</p><p>首先你的明白你喜欢的是什么吉他，到底是不是吉他“木吉他、电吉他、尤克里里、贝斯”这些东西你的先弄明白，吉他每个部位叫什么名字得清楚，我自己学的是木吉他（民谣吉他）。</p><p>木吉他有全单和面单的合板的带电箱的不带电箱的，</p><p>全单面单合板：简单理解也就是一颗书砍了以后整块的切下来的木料组合的琴叫全单的。</p><p>​                            面单的就是吉他只有一个面（有可能是前面的班板，也有可能是背侧板）是一整块木料的</p><p>​                            合板就是整把吉他全是合板组成的（合板也就是碎的木料打成了木浆，然后经过一些工业工序最后压成的一块木板）</p><ul><li><p>好现在大致什么是全单面单合板，最好的吉他就是全单的吉他，其次面单，最差合板，——当然还有一种</p><p>叫“烧火棍”大家还是去找个视频看一看了解一下这些东西最好。</p><ul><li><p>那预算多少，买什么牌子呢？（木吉他）</p><p>请问你的手机多少钱，我推荐如果你真的想学“直接买一个贵的”，当然大多数人</p><p>可能都是想先买一个入门级的先学看看，这个看你自己考虑</p><p>不用担心被坑淘宝上因为一个竞争关系的原因，只要不是上5000以上的感觉好像都没必要太注意的去挑选吧，当然你自己还是要货比三家呀！！！</p><p>买贵的买便宜的记住一点&gt;认准大品牌</p><p>大品牌坑少一点，大品牌有“芬达、Gibson、Lbanez、（前三个电吉他造诣较高），雅马哈、卡马、拿火”当然还有很多大品牌我用过的大概就这些，我买的第一把琴是“拉维斯“不过那个时候不是很懂，当然琴也不差</p></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 吉他学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA入门环境搭建</title>
      <link href="posts/5d95.html"/>
      <url>posts/5d95.html</url>
      
        <content type="html"><![CDATA[<p>###初识JAVA</p><p>1972年C诞生</p><p>1982年C++诞生</p><p>1995年（Applet）</p><p><del>J2SE桌面</del></p><p><del>J2ME手机</del></p><p>J2EE服务器</p><p>高可用、高性能、高并发</p><p>构建工具 Maven</p><p>应用服务器 Tomcat</p><p>Web开发 Spring</p><p>开发工具 Eclipse、Netbean</p><p>2006 Hadoop（大数据）</p><p>2008 Android （手机端）</p><h3 id="语言的三大结构"><a href="#语言的三大结构" class="headerlink" title="语言的三大结构"></a>语言的三大结构</h3><ol><li><p>顺序结构</p></li><li><p>选择结构</p><p>if   else</p><p>switch   case</p></li><li><p>循环结构</p><p>while  for  do  while  goto</p></li></ol><h3 id="JAVA特性和优势"><a href="#JAVA特性和优势" class="headerlink" title="JAVA特性和优势"></a>JAVA特性和优势</h3><p>（待理解）</p><ul><li>简单性</li><li>面向对象</li><li>可移植性（跨平台性，一次编译到处运行）</li><li>高性能</li><li>分布式</li><li>动态性（反射机制）</li><li>多线程</li><li>安全性（异常机制）</li><li>健壮性（使用的人多）</li><li>思考：为什么JAVA能够成功</li></ul><h3 id="JAVA的三大版本"><a href="#JAVA的三大版本" class="headerlink" title="JAVA的三大版本"></a>JAVA的三大版本</h3><ul><li><p>JAVASE标准版</p><p>桌面程序，控制台</p></li><li><p>JAVAME嵌入式开发（基本已经落后）</p><p>手机，小家电</p></li><li><p>JAVAEE企业级开发</p><p>Web前端，服务器开发</p></li><li><p>JDK（开发者工具）</p></li><li><p>JRE（运行时环境）</p></li><li><p>JVM（编译型，解释型）</p></li></ul><h3 id="JAVA开发环境的搭建"><a href="#JAVA开发环境的搭建" class="headerlink" title="JAVA开发环境的搭建"></a>JAVA开发环境的搭建</h3><ol><li><p>JDK下载与安装卸载</p><p>卸载JDK删除目录文件</p><p>删除环境变量JAVA——HOME</p><p>删除path下JAVA目录</p><p>打开CMD运行JAVA -version</p></li><li><p>下载对应的JDK版本（安装）</p><p>安装</p><p>配置环境环境变量在系统变量里新建变量</p><p>JAVA_HOME</p><p>路径</p><p>配置path变量找到path变量打开新建%JAVA_HOME%\bin</p><p>新建%JAVA_HOME%\jre\bin</p></li><li><p>打开CMD输入 JAVA -version</p></li></ol><h3 id="第一个程序Hello-wored"><a href="#第一个程序Hello-wored" class="headerlink" title="第一个程序Hello wored"></a>第一个程序Hello wored</h3><ul><li><p>Helloworld 简单的语法规则</p><p>新建.java文件</p></li><li><p>编写第一个程序</p></li></ul><pre><code>//公开的类  hello为类名public class hello{    public static void main(String[] args)  //公开的方法    {        System.out.println("Hello,world");  //输出语句    }}</code></pre><p> 然后进行编译找到目录打开CMD 运用javac 文件名.java进行编译，然后会看到文件里多了一个class文件再用CMD运行命令java 文件名  即可运行代码。</p><p>![运行结果](D:\Study DOME\JAVA notes\code\javadome\Hellowold.png)</p><p>注意：java 对大小写敏感</p><p>​            输出语句为中文有可能出现BUG（尽量使用英文编辑）</p><p>​            文件名一定与类名要保证一至</p><p>​            符号要运用英文符号</p><h3 id="JAVA程序的运行机制"><a href="#JAVA程序的运行机制" class="headerlink" title="JAVA程序的运行机制"></a>JAVA程序的运行机制</h3><ul><li><p>编译型（complie）</p><p>（好比你需要了解一件国外的书，可以通过翻译好的中文版进行了解，可以有回路可以回过去在看一次，但是一旦内容有更新就需要重新编译）</p><p>C  C++多用</p></li><li><p>解释型（interpreted）</p><p>（好比想了解一本外文书，但是请了一位翻译说给你听，比较快捷但是没有回路想要在一次了解就需要重复翻译好处就是一旦有改动就可以实时翻译，也就是我想知道什么就翻译什么）</p><p>网页  JAVA</p></li><li><p>程序的运行机制</p><p>源文件&gt;编译成class文件&gt;解释器&gt;操作平台</p></li></ul><h3 id="IDEA的安装"><a href="#IDEA的安装" class="headerlink" title="IDEA的安装"></a>IDEA的安装</h3><ol><li><p>什么是IDE（集成开发环境）</p><p>用于提供程序开发环境的运用程序</p></li><li><p>IDEA介绍</p><p>jetbrains公司</p></li><li><p>下载后傻瓜式安装（学生可以下载公共版的）</p><p>设置里可以设置字体</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA预科阶段二</title>
      <link href="posts/2a8c.html"/>
      <url>posts/2a8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Computer-电子计算机"><a href="#Computer-电子计算机" class="headerlink" title="Computer 电子计算机"></a>Computer 电子计算机</h1><h3 id="电脑的组成由："><a href="#电脑的组成由：" class="headerlink" title="电脑的组成由："></a>电脑的组成由：</h3><p>Io设备（输入输出设备）</p><p>应用软件、办公软件</p><p>开发、软件开发</p><p>人机交互（图形化界面、命令行DOS）</p><p>电脑运行的体系：</p><ul><li>冯洛伊曼体系结构（待补充）</li></ul><p><img src="https://pic1.zhimg.com/80/v2-6a4c23a9769a0498fe07f164d5f1a7c8_720w.jpg" alt="冯洛伊曼体系结构"></p><h4 id="电脑常用的快捷键："><a href="#电脑常用的快捷键：" class="headerlink" title="电脑常用的快捷键："></a>电脑常用的快捷键：</h4><p>Tab、Shift、Ctrl、Alt、空格、Enter、Window、</p><p>任务管理器：Ctrl+Shift+Esc</p><p>运行：Ctrl+Window+R</p><h3 id="DOS命令："><a href="#DOS命令：" class="headerlink" title="DOS命令："></a>DOS命令：</h3><ol><li>打开CMD的方式直接在开始菜单里点</li><li>运行CMD打开</li><li>在任意文件夹下按住Shift+右键点击，打开命令行窗口（可以直接进入到文件路径）</li><li>在资源管理器的地址栏前面加上CMD的路径（可以直接进入到文件路径）</li></ol><p>管理员方式运行，在菜单里右键选择管理员运行。</p><ul><li><p>盘符切换目录 D:</p></li><li><p>查看当前目录下所有文件 dir</p></li><li><p>切换目录 cd （change  directory）“cd  /d  E:” (即可进入需要的路径)  “cd..”  返回上一级</p></li><li><p>清理当前窗口 cls （clear screen）</p></li><li><p>退出终端 exit</p></li><li><p>查看电脑ip  ipconfig</p></li><li><p>打开应用如： calc（计算机）mspaint（画图）notepad（记事本）直接输出英文名称即可打开</p><p>或者在目录下直接输入要打开的文件名称打开</p></li><li><p>ping 命令  ping <a href="http://www.baidu.com/">www.baidu.com</a></p></li><li><p>创建目录文件 md 名称 再创建的文件里建立文件cd&gt;名称</p></li><li><p>删除文件del 文件.名称</p></li><li><p>删除目录 rd 名称</p></li></ul><h3 id="计算机语言的发展史"><a href="#计算机语言的发展史" class="headerlink" title="计算机语言的发展史"></a>计算机语言的发展史</h3><p>（待补充）</p><ol><li><p>第一代语言“机器语言”</p><p>二进制码</p></li><li><p>汇编语言</p><p>解决人类不能读懂计算机语言的问题 </p></li><li><p>高级语言（第三代语言）</p><p>面向对象和面向过程两大类</p></li></ol><p>）</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA预科阶段一</title>
      <link href="posts/ea1f.html"/>
      <url>posts/ea1f.html</url>
      
        <content type="html"><![CDATA[<h1 id="我的第一篇文章"><a href="#我的第一篇文章" class="headerlink" title="我的第一篇文章"></a>我的第一篇文章</h1><p>markDown语法的使用</p><h2 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h2><p>运用“#”增加一个“#”标题级别增加一级</p><p>如“#标题”为一级标题依次类推</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>运用“星号”，如“星号星号Hello，World星号星号“是加粗<br>“星号Hello，world星号”是斜体<br>“星号星号星号Hello，world星号星号星号”是斜体加粗<br>删除线用“波浪线~”来表示<br>如“波浪线波浪线删除线波浪线波浪线”，“<del>删除线</del>”</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>运用“&gt;”来表示<br>如“&gt; 选择某某某某”</p><blockquote><p>选择某某某某</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>可以运用“—”或者“***”，表示</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>可以引用本地图片和网络图片<br>运用“！【名字】（地址）”来表示</p><img src="D:\用于存放博客用到的主题\tupian\微信图片_20210206150910.jpg" alt="tupian" style="zoom:25%;"><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><p>运用【名字】（链接）来表示<br>如<a href="https://xinqindexuexi.gitee.io/">我的博客</a></p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>运用“1.空格”或者“-空格”都可以表示</p><ol><li></li><li></li><li></li></ol><ul><li></li><li></li><li><p>如上</p></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>可以用右键直接插入</p><p>也可以“|某某|某某|某某|”</p><p>分割线|XX|XX|某XX|</p><p>内容|某某|某某|某某|</p><p>如</p><table><thead><tr><th>某某</th><th>某某</th><th>某某</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td>XX</td><td>XX</td><td>XX</td></tr><tr><td>—-</td><td>—-</td><td>—-</td></tr><tr><td></td><td></td><td></td></tr><tr><td>某某</td><td>某某</td><td>某某</td></tr><tr><td>—-</td><td>—-</td><td>—-</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p> 但是一般运用插入</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>通过“···”来表示</p><p>如</p><pre><code>public static void main(String[] args){}</code></pre><p>还未完善还有很多可以运用插入。</p>]]></content>
      
      
      <categories>
          
          <category> Java学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
